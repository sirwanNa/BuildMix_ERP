// <auto-generated />
using System;
using Firm.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Firm.Infrastructure.Migrations
{
    [DbContext(typeof(FirmDbContext))]
    partial class FirmDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("firm")
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Firm.Domain.Entities.Commodity.Material", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MainProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubProductId");

                    b.HasIndex("MainProductId", "SubProductId")
                        .IsUnique();

                    b.ToTable("Material", "firm");
                });

            modelBuilder.Entity("Firm.Domain.Entities.Commodity.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.HasIndex("UnitId");

                    b.ToTable("Product", "firm");
                });

            modelBuilder.Entity("Firm.Domain.Entities.Common.Unit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Conversion")
                        .HasColumnType("real");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Unit", "firm");
                });

            modelBuilder.Entity("Firm.Domain.Entities.Market.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ContractType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FactoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PersonAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PersonLocationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FactoryId");

                    b.HasIndex("PersonAddressId");

                    b.HasIndex("PersonLocationId");

                    b.ToTable("Contract", "firm");
                });

            modelBuilder.Entity("Firm.Domain.Entities.Market.ContractDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QTY_Price")
                        .HasColumnType("int");

                    b.Property<float>("Total")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ContractId", "ProductId")
                        .IsUnique();

                    b.ToTable("ContractDetails", "firm");
                });

            modelBuilder.Entity("Firm.Domain.Entities.Market.ContractLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContractDetailsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContractDetailsId");

                    b.ToTable("ContractLog", "firm");
                });

            modelBuilder.Entity("Firm.Domain.Entities.Market.ContractLogVehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContractDetailsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("FullWeight")
                        .HasColumnType("real");

                    b.Property<Guid>("TruckId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TruckId");

                    b.HasIndex("ContractDetailsId", "TruckId")
                        .IsUnique();

                    b.ToTable("ContractLogVehicle", "firm");
                });

            modelBuilder.Entity("Firm.Domain.Entities.Market.ContractService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("QTY_Price")
                        .HasColumnType("int");

                    b.Property<int>("TruckType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContractId", "TruckType")
                        .IsUnique();

                    b.ToTable("ContractService", "firm");
                });

            modelBuilder.Entity("Firm.Domain.Entities.Staff.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LastName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Person", "firm");
                });

            modelBuilder.Entity("Firm.Domain.Entities.Staff.PersonLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Distance")
                        .HasColumnType("int");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonLocation", "firm");
                });

            modelBuilder.Entity("Firm.Domain.Entities.Staff.PersonPosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PersonType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId", "PersonType")
                        .IsUnique();

                    b.ToTable("PersonPosition", "firm");
                });

            modelBuilder.Entity("Firm.Domain.Entities.Vehicle.Truck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Plate")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TruckType")
                        .HasColumnType("int");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("OwnerId", "DriverId", "Plate");

                    b.ToTable("Truck", "firm");
                });

            modelBuilder.Entity("Firm.Domain.Entities.Commodity.Material", b =>
                {
                    b.HasOne("Firm.Domain.Entities.Commodity.Product", "MainProduct")
                        .WithMany("MainMaterials")
                        .HasForeignKey("MainProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Firm.Domain.Entities.Commodity.Product", "SubProduct")
                        .WithMany("SubMaterials")
                        .HasForeignKey("SubProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MainProduct");

                    b.Navigation("SubProduct");
                });

            modelBuilder.Entity("Firm.Domain.Entities.Commodity.Product", b =>
                {
                    b.HasOne("Firm.Domain.Entities.Common.Unit", "Unit")
                        .WithMany("Products")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Firm.Domain.Entities.Common.Unit", b =>
                {
                    b.HasOne("Firm.Domain.Entities.Common.Unit", "Parent")
                        .WithMany("Units")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Firm.Domain.Entities.Market.Contract", b =>
                {
                    b.HasOne("Firm.Domain.Entities.Staff.Person", "Factory")
                        .WithMany("Contracts")
                        .HasForeignKey("FactoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Firm.Domain.Entities.Staff.PersonLocation", "PersonAddress")
                        .WithMany()
                        .HasForeignKey("PersonAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Firm.Domain.Entities.Staff.PersonLocation", null)
                        .WithMany("Contracts")
                        .HasForeignKey("PersonLocationId");

                    b.Navigation("Factory");

                    b.Navigation("PersonAddress");
                });

            modelBuilder.Entity("Firm.Domain.Entities.Market.ContractDetails", b =>
                {
                    b.HasOne("Firm.Domain.Entities.Market.Contract", "Contract")
                        .WithMany("ContractDetailsList")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Firm.Domain.Entities.Commodity.Product", "Product")
                        .WithMany("ContractDetailsList")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Firm.Domain.Entities.Market.ContractLog", b =>
                {
                    b.HasOne("Firm.Domain.Entities.Market.ContractDetails", "ContractDetails")
                        .WithMany()
                        .HasForeignKey("ContractDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContractDetails");
                });

            modelBuilder.Entity("Firm.Domain.Entities.Market.ContractLogVehicle", b =>
                {
                    b.HasOne("Firm.Domain.Entities.Market.ContractDetails", "ContractDetails")
                        .WithMany("ContractLogVehicles")
                        .HasForeignKey("ContractDetailsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Firm.Domain.Entities.Vehicle.Truck", "Truck")
                        .WithMany("ContractLogVehicles")
                        .HasForeignKey("TruckId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ContractDetails");

                    b.Navigation("Truck");
                });

            modelBuilder.Entity("Firm.Domain.Entities.Market.ContractService", b =>
                {
                    b.HasOne("Firm.Domain.Entities.Market.Contract", "Contract")
                        .WithMany("ContractServicesList")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("Firm.Domain.Entities.Staff.Person", b =>
                {
                    b.HasOne("Firm.Domain.Entities.Staff.Person", "Parent")
                        .WithMany("ChildrenList")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Firm.Domain.Entities.Staff.PersonLocation", b =>
                {
                    b.HasOne("Firm.Domain.Entities.Staff.Person", "Person")
                        .WithMany("PersonLocations")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Firm.Domain.Entities.Staff.PersonPosition", b =>
                {
                    b.HasOne("Firm.Domain.Entities.Staff.Person", "Person")
                        .WithMany("PersonPositions")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Firm.Domain.Entities.Vehicle.Truck", b =>
                {
                    b.HasOne("Firm.Domain.Entities.Staff.Person", "Driver")
                        .WithMany("TruckDrivers")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Firm.Domain.Entities.Staff.Person", "Owner")
                        .WithMany("TruckOwners")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Firm.Domain.Entities.Commodity.Product", b =>
                {
                    b.Navigation("ContractDetailsList");

                    b.Navigation("MainMaterials");

                    b.Navigation("SubMaterials");
                });

            modelBuilder.Entity("Firm.Domain.Entities.Common.Unit", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("Firm.Domain.Entities.Market.Contract", b =>
                {
                    b.Navigation("ContractDetailsList");

                    b.Navigation("ContractServicesList");
                });

            modelBuilder.Entity("Firm.Domain.Entities.Market.ContractDetails", b =>
                {
                    b.Navigation("ContractLogVehicles");
                });

            modelBuilder.Entity("Firm.Domain.Entities.Staff.Person", b =>
                {
                    b.Navigation("ChildrenList");

                    b.Navigation("Contracts");

                    b.Navigation("PersonLocations");

                    b.Navigation("PersonPositions");

                    b.Navigation("TruckDrivers");

                    b.Navigation("TruckOwners");
                });

            modelBuilder.Entity("Firm.Domain.Entities.Staff.PersonLocation", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("Firm.Domain.Entities.Vehicle.Truck", b =>
                {
                    b.Navigation("ContractLogVehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
